name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # schedule:
  #   - cron: '16 11 * * *'
  push:
    # branches: [ "main" ]
    # # Publish semver tags as releases.
    # tags: [ 'v*.*.*' ]
  pull_request:
    # branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Hadolint Action
        # You may pin to the exact commit or the version.
        # uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf
        uses: hadolint/hadolint-action@v3.1.0
        # with:
        #   # The path to the Dockerfile to lint
        #   dockerfile: . # optional, default is Dockerfile
        #   # Path to a config file
        #   config: # optional
        #   # Search for specified dockerfile recursively, from the project root
        #   recursive: # optional, default is false
        #   # The path where to save the linting results to
        #   output-file: # optional, default is /dev/stdout
        #   # Don't create colored output.
        #   no-color: # optional, default is false
        #   # Never exit with a failure status code
        #   no-fail: # optional, default is false
        #   # Print more information about the running config
        #   verbose: # optional, default is false
        #   # The output format, one of [tty (default) | json | checkstyle | codeclimate | gitlab_codeclimate | codacy | sarif]

        #   format: # optional, default is tty
        #   # Fail the pipeline only if rules with severity above this threshold are violated. One of [error | warning | info (default) | style | ignore]

        #   failure-threshold: # optional, default is info
        #   # A comma separated list of rules whose severity will be `error`
        #   override-error: # optional
        #   # A comma separated list of rules whose severity will be `warning`
        #   override-warning: # optional
        #   # A comma separated list of rules whose severity will be `info`
        #   override-info: # optional
        #   # A comma separated list of rules whose severity will be `style`
        #   override-style: # optional
        #   # A comma separated string of rules to ignore
        #   ignore: # optional
        #   # A comma separated list of trusted registry urls
        #   trusted-registries: # optional
                
      - name: Checkov GitHub Action
        # You may pin to the exact commit or the version.
        # uses: bridgecrewio/checkov-action@99bb2caf247dfd9f03cf984373bc6043d4e32ebf
        uses: bridgecrewio/checkov-action@v12.1347.0
        with:
          # directory with infrastructure code to scan
          directory: # optional, default is .
          # Run scan only on a specific check identifier (comma separated)
          check: # optional
          # Run scan on all checks but a specific check identifier (comma separated)
          skip_check: # optional
          # display only failed checks
          quiet: # optional
          # Environment variable name of the Bridgecrew API key from Bridgecrew app
          api-key: # optional
          # do not return an error code if there are failed checks
          soft_fail: # optional
          # run only on a specific infrastructure
          framework: # optional
          # comma separated list of external (custom) checks directories
          external_checks_dirs: # optional
          # comma separated list of external (custom) checks repositories
          external_checks_repos: # optional
          # The format of the output. cli, json, junitxml, github_failed_only, or sarif
          output_format: # optional, default is sarif
          # download external terraform modules from public git repositories and terraform registry:true, false
          download_external_modules: # optional
          # log level
          log_level: # optional, default is WARNING
          # checkov configuration file
          config_file: # optional
          # Path to a .checkov.baseline file to compare. Report will include only failed checks that are not in the baseline
          baseline: # optional
          # Do not return an error code only for specific check identifiers (comma separated)
          soft_fail_on: # optional
          # Return an error code only for specific check identifiers (comma separated)
          hard_fail_on: # optional
          # Set the username or UID used and optionally the groupname or GID for the action to run under
          container_user: # optional, default is 0

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Aqua Security Trivy
        # You may pin to the exact commit or the version.
        # uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8
        uses: aquasecurity/trivy-action@0.24.0
        with:
          # Scan type to use for scanning vulnerability
          scan-type: # optional, default is image
          # image reference(for backward compatibility)
          image-ref: # optional
          # reference of tar file to scan
          input: # optional, default is 
          # Scan reference
          scan-ref: # optional, default is .
          # exit code when vulnerabilities were found
          exit-code: # optional
          # ignore unfixed vulnerabilities
          ignore-unfixed: # optional, default is false
          # comma-separated list of vulnerability types (os,library)
          vuln-type: # optional, default is os,library
          # severities of vulnerabilities to be displayed
          severity: # optional, default is UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # output format (table, json, template)
          format: # optional, default is table
          # use an existing template for rendering output (@/contrib/gitlab.tpl, @/contrib/junit.tpl, @/contrib/html.tpl)
          template: # optional, default is 
          # writes results to a file with the specified file name
          output: # optional, default is 
          # comma separated list of directories where traversal is skipped
          skip-dirs: # optional, default is 
          # comma separated list of files to be skipped
          skip-files: # optional, default is 
          # specify where the cache is stored
          cache-dir: # optional, default is 
          # timeout (default 5m0s)
          timeout: # optional, default is 
          # filter vulnerabilities with OPA rego language
          ignore-policy: # optional, default is 
          # suppress progress bar and log output
          hide-progress: # optional
          # output all packages regardless of vulnerability
          list-all-pkgs: # optional, default is false
          # comma-separated list of what security issues to detect
          scanners: # optional, default is 
          # comma-separated list of relative paths in repository to one or more .trivyignore files
          trivyignores: # optional, default is 
          # input artifact type (image, fs, repo, archive) for SBOM generation
          artifact-type: # optional
          # GitHub Personal Access Token (PAT) for submitting SBOM to GitHub Dependency Snapshot API
          github-pat: # optional
          # path to trivy.yaml config
          trivy-config: # optional
          # path to terraform tfvars file
          tf-vars: # optional
          # limit severities for SARIF format
          limit-severities-for-sarif: # optional
          # unix domain socket path to use for docker scanning, ex. unix:///var/run/docker.sock
          docker-host: # optional

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
